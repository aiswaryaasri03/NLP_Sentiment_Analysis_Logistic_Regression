# -*- coding: utf-8 -*-
"""NLP_Sentiment_Analysis_Logistic_Regression.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZwC-0eK3OoP3oMTc47H3ZmM4KNmX4h5r
"""

!pip install nltk

import pandas as pd
import string
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
import nltk
nltk.download('stopwords')

reviews_df = pd.read_csv('tamil_movie_reviews_train.csv')
reviews_df

reviews_df['ReviewInTamil'] = reviews_df['ReviewInTamil'].fillna('')

reviews_df.describe()

sns.countplot(x = reviews_df['Rating'])

reviews_df['length'] = reviews_df['ReviewInTamil'].astype(str).apply(len)

reviews_df

from matplotlib import pyplot as plt
reviews_df['ReviewId'].plot(kind='line', figsize=(8, 4), title='ReviewId')
plt.gca().spines[['top', 'right']].set_visible(False)

reviews_df['length'].plot(bins=100, kind='hist')

reviews_df.describe()

sns.countplot(x = reviews_df['Feedback'])

negative = reviews_df[reviews_df['Feedback'] == 0]
negative

neutral = reviews_df[reviews_df['Feedback'] == 1]
neutral

positive = reviews_df[reviews_df['Feedback'] == 2]
positive

sentences_negative = negative['ReviewInTamil'].tolist()
sentences_neutral = neutral['ReviewInTamil'].tolist()
sentences_positive = positive['ReviewInTamil'].tolist()
sentences_as_one_string_negative =" ".join(sentences_negative)
sentences_as_one_string_neutral =" ".join(sentences_neutral)
sentences_as_one_string_positive =" ".join(sentences_positive)

sentences_as_one_string_negative

sentences_as_one_string_neutral

sentences_as_one_string_positive

import pandas as pd
df = pd.read_csv('tamil_movie_reviews_train.csv')
df.head(), df.info()

import string
import pandas as pd

df = pd.read_csv('tamil_movie_reviews_train.csv')

def punctuation_remove(text_data):
    punctuation = "".join([t for t in text_data if t not in string.punctuation])
    return punctuation

df['ReviewInTamil_no_punctuation'] = df['ReviewInTamil'].apply(punctuation_remove)
df[['ReviewInTamil', 'ReviewInTamil_no_punctuation']].head()

import re
import pandas as pd
import string

df = pd.read_csv('tamil_movie_reviews_train.csv')

def punctuation_remove(text_data):
    punctuation = "".join([t for t in text_data if t not in string.punctuation])
    return punctuation

df['ReviewInTamil_no_punctuation'] = df['ReviewInTamil'].apply(punctuation_remove)

def tokenization(text_data):
    tokens_text = re.split(' ', text_data)
    return tokens_text

df['Tokenized_ReviewInTamil'] = df['ReviewInTamil_no_punctuation'].apply(tokenization)
df[['ReviewInTamil', 'ReviewInTamil_no_punctuation', 'Tokenized_ReviewInTamil']].head()

import pandas as pd
import re
import string

stopwords = [ 'ஒரு', 'என்று', 'மற்றும்', 'இந்த', 'இது', 'என்ற', 'கொண்டு',
             'என்பது', 'பல', 'ஆகும்', 'அல்லது', 'அவர்', 'நான்', 'உள்ள',
              'அந்த', 'இவர்', 'என', 'முதல்', 'என்ன', 'இருந்து', 'சில',
              'என்', 'போன்ற', 'வேண்டும்', 'வந்து', 'இதன்', 'அது',
              'அவன்', 'தான்', 'பலரும்', 'என்னும்', 'மேலும்', 'பின்னர்',
              'கொண்ட', 'இருக்கும்', 'தனது', 'உள்ளது', 'போது', 'என்றும்',
              'அதன்', 'தன்', 'பிறகு', 'அவர்கள்', 'வரை', 'அவள்', 'நீ',
              'ஆகிய', 'இருந்தது', 'உள்ளன', 'வந்த', 'இருந்த', 'மிகவும்',
              'இங்கு', 'மீது', 'ஓர்', 'இவை', 'இந்தக்', 'பற்றி', 'வரும்',
              'வேறு', 'இரு', 'இதில்', 'போல்', 'இப்போது', 'அவரது',
              'மட்டும்', 'இந்தப்', 'எனும்', 'மேல்', 'பின்', 'சேர்ந்த',
              'ஆகியோர்', 'எனக்கு', 'இன்னும்', 'அந்தப்', 'அன்று', 'ஒரே',
              'மிக', 'அங்கு', 'பல்வேறு', 'விட்டு', 'பெரும்', 'அதை',
              'பற்றிய', 'உன்', 'அதிக', 'அந்தக்', 'பேர்', 'இதனால்',
              'அவை', 'அதே', 'ஏன்', 'முறை', 'யார்', 'என்பதை',
              'எல்லாம்', 'மட்டுமே', 'இங்கே', 'அங்கே', 'இடம்', 'இடத்தில்',
              'அதில்', 'நாம்', 'அதற்கு', 'எனவே', 'பிற', 'சிறு', 'மற்ற',
              'விட', 'எந்த', 'எனவும்', 'எனப்படும்', 'எனினும்', 'அடுத்த',
              'இதனை', 'இதை', 'கொள்ள', 'இந்தத்', 'இதற்கு', 'அதனால்',
              'தவிர', 'போல', 'வரையில்', 'சற்று', 'எனக்']


df = pd.read_csv('tamil_movie_reviews_train.csv')


def punctuation_remove(text_data):
    punctuation = "".join([t for t in text_data if t not in string.punctuation])
    return punctuation

df['ReviewInTamil_no_punctuation'] = df['ReviewInTamil'].apply(punctuation_remove)

def tokenization(text_data):
    tokens_text = re.split(' ', text_data)
    return tokens_text

df['Tokenized_ReviewInTamil'] = df['ReviewInTamil_no_punctuation'].apply(tokenization)

def stopwords_remove(tokenized_data):
    removed = [s for s in tokenized_data if s not in stopwords]
    return removed

df['Tokenized_ReviewInTamil_no_stopwords'] = df['Tokenized_ReviewInTamil'].apply(stopwords_remove)
df[['ReviewInTamil', 'ReviewInTamil_no_punctuation', 'Tokenized_ReviewInTamil', 'Tokenized_ReviewInTamil_no_stopwords']].head()

print(df['Tokenized_ReviewInTamil_no_stopwords'][5])

!pip install scikit-learn

from sklearn.feature_extraction.text import CountVectorizer
vectorizer = CountVectorizer(analyzer = stopwords_remove)
reviews_countvectorizer = vectorizer.fit_transform(df['Tokenized_ReviewInTamil_no_stopwords'])

print(vectorizer.get_feature_names_out())

print(reviews_countvectorizer.toarray())

reviews_countvectorizer.shape

reviews = pd.DataFrame(reviews_countvectorizer.toarray())

X = reviews

y = reviews_df['Feedback']
y

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)

from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report, confusion_matrix
model = LogisticRegression()
model.fit(X_train, y_train)
y_pred = model.predict(X_test)
cm = confusion_matrix(y_pred, y_test)
sns.heatmap(cm, annot = True)
print(classification_report(y_test, y_pred))

from sklearn.metrics import roc_curve, roc_auc_score
from sklearn.preprocessing import label_binarize
from sklearn.multiclass import OneVsRestClassifier
from sklearn.linear_model import LogisticRegression
import numpy as np
import matplotlib.pyplot as plt

y_binarized = label_binarize(y_test, classes=[0, 1, 2])
n_classes = y_binarized.shape[1]

# One-vs-Rest classifier using Logistic Regression
ovr_classifier = OneVsRestClassifier(LogisticRegression(random_state=42))
y_score = ovr_classifier.fit(X_train, y_train).predict_proba(X_test)

# Plot ROC curve for each class
plt.figure(figsize=(10, 6))
for i in range(n_classes):
    fpr, tpr, _ = roc_curve(y_binarized[:, i], y_score[:, i])
    plt.plot(fpr, tpr, label=f'Class {i} (area = {roc_auc_score(y_binarized[:, i], y_score[:, i]):.2f})')

plt.plot([0, 1], [0, 1], color='navy', linestyle='--')
plt.title('ROC Curve for Each Class')
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.legend(loc="lower right")
plt.show()

from sklearn.metrics import precision_recall_curve

plt.figure(figsize=(10, 6))
for i in range(n_classes):
    precision, recall, _ = precision_recall_curve(y_binarized[:, i], y_score[:, i])
    plt.plot(recall, precision, label=f'Class {i}')

plt.xlabel('Recall')
plt.ylabel('Precision')
plt.title('Precision-Recall Curve for Each Class')
plt.legend(loc='lower left')
plt.show()

class_counts = df['Feedback'].value_counts()
plt.figure(figsize=(8, 8))
plt.pie(class_counts, labels=['Negative', 'Neutral', 'Positive'], autopct='%1.1f%%', startangle=90, colors=['#9385e3','#b786e0','#da88dc'])
plt.title('Feedback Class Distribution')
plt.show()